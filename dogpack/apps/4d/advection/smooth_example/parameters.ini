; Parameters common to dogpack applications
[dogParams]
defaults_file = "$DOGPACK/config/dogParams_defaults.ini"
ndims       = 4          ; 1, 2, 3, or 4
mesh_type   = Cartesian  ; (either Cartesian or Unstructured) 
nout        = 10         ; number of output times to print results
tfinal      = 1.00       ; final time
dtv(1)      = 1.00e-03   ; initial dt
dtv(2)      = 1.0e10     ; max allowable dt 
cflv(1)     = 0.31       ; max allowable Courant number
cflv(2)     = 0.30       ; desired Courant number
nv          = 500000     ; max number of time steps per call to DogSolve
time_stepping_method = Runge-Kutta ; (e.g., Runge-Kutta, SDC, Lax-Wendroff, User-Defined)
limiter_method = moment  ; (e.g., moment, viscosity)
space_order = 3   ; =method(1)= order of accuracy in space
time_order  = 3   ; =method(2)= order of accuracy in time
use_limiter = 0   ; =method(3)= use limiter (1-yes, 0-no)
verbosity   = 1   ; =method(4)= verbosity of output
mcapa       = 0   ; =method(5)= mcapa (capacity function index in aux arrays)
maux        = 3   ; =method(6)= maux (number of aux arrays, maux >= mcapa)
source_term = 0   ; =method(7)= source term (1-yes, 0-no)
meqn        = 1   ; number of equations
mrestart    = 0   ; restart from old data (1-yes, 0-no)
nstart      = 0   ; if mrestart==1: from file q(nstart)_restart.dat
datafmt     = 1   ; 1 for ascii, 5 for hdf5.
; -------------------------------------------------
;   Cartesian grid data (ignored if Unstructured)
; -------------------------------------------------
[grid]
mx    =  11       ; number of grid elements in x-direction
my    =  11       ; number of grid elements in y-direction
mz    =  11       ; number of grid elements in z-direction
mw    =  11       ; number of grid elements in w-direction
mbc   =  2        ; number of ghost cells on each boundary
xlow  =  0.0e0    ; left end point
xhigh =  1.0e0    ; right end point
ylow  =  0.0e0    ; lower end point
yhigh =  1.0e0    ; upper end point
zlow  =  0.0e0    ; left end point
zhigh =  1.0e0    ; right end point
wlow  =  0.0e0    ; left end point
whigh =  1.0e0    ; right end point

; -------------------------------------------------
;   Output of data on slices for efficient plotting
; -------------------------------------------------
[outslice]
numslices = 3         ; number of slices (for each slice need to specify
	              ;                   slicekind and sliceidx)
slicekind = 1,2,3     ; type of slice (1: z=constant, 2: y=constant, 3: x=constant)
sliceidx  = 16,16,16  ; slice index (k=sliceidx or j=sliceidx or i=sliceidx)
output4D  = 1         ; should 3D data be ouputted (1-yes, 0-no)

; -------------------------------------------------
;  Initial condition parameters
; -------------------------------------------------
[initialparams]
x0    = 0.5  ; x-position of center of initial (smooth) spherical blob
y0    = 0.5  ; y-position of center of initial (smooth) spherical blob
z0    = 0.5  ; z-position of center of initial (smooth) spherical blob
w0    = 0.5  ; w-position of center of initial (smooth) spherical blob
width = 0.3  ; width of initial (smooth) spherical blob
u1    = 1.0  ; x-velocity component of constant velocity field
u2    = 1.0  ; y-velocity component of constant velocity field
u3    = 1.0  ; z-velocity component of constant velocity field
u4    = 1.0  ; w-velocity component of constant velocity field
