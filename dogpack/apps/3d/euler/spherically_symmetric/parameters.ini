; Parameters common to dogpack applications
[dogParams]
defaults_file = "$DOGPACK/config/dogParams_defaults.ini"
ndims       = 3          ; 1, 2, or 3
mesh_type   = Cartesian  ; (either Cartesian or Unstructured) 
nout        = 10         ; number of output times to print results
tfinal      = 0.35       ; final time
dtv(1)      = 1.00e-03   ; initial dt
dtv(2)      = 1.0e10     ; max allowable dt 
cflv(1)     = 0.16       ; max allowable Courant number
cflv(2)     = 0.15       ; desired Courant number
nv          = 500000     ; max number of time steps per call to DogSolve
time_stepping_method = Runge-Kutta ; (e.g., Runge-Kutta, SDC, Lax-Wendroff, User-Defined)
limiter_method = moment  ; (e.g., moment, viscosity)
space_order = 3   ; =method(1)= order of accuracy in space
time_order  = 3   ; =method(2)= order of accuracy in time
use_limiter = 1   ; =method(3)= use limiter (1-yes, 0-no)
verbosity   = 1   ; =method(4)= verbosity of output
mcapa       = 0   ; =method(5)= mcapa (capacity function index in aux arrays)
maux        = 0   ; =method(6)= maux (number of aux arrays, maux >= mcapa)
source_term = 0   ; =method(7)= source term (1-yes, 0-no)
meqn        = 5   ; number of equations
mrestart    = 0   ; restart from old data (1-yes, 0-no)
nstart      = 0   ; if mrestart==1: from file q(nstart)_restart.dat
datafmt     = 1   ; 1 for ascii, 5 for hdf5.
ic_quad_order = 20  ; order of quadrature for L2-projection of initial conditions
; -------------------------------------------------
;   Cartesian grid data (ignored if Unstructured)
; -------------------------------------------------
[grid]
mx    = 65       ; number of grid elements in x-direction
my    = 65       ; number of grid elements in y-direction
mz    = 65       ; number of grid elements in z-direction
mbc   =  2        ; number of ghost cells on each boundary
xlow  = -1.0e0    ; left end point
xhigh =  1.0e0    ; right end point
ylow  = -1.0e0    ; lower end point
yhigh =  1.0e0    ; upper end point
zlow  = -1.0e0    ; left end point
zhigh =  1.0e0    ; right end point
; -------------------------------------------------
;   Output of data on slices for efficient plotting
; -------------------------------------------------
[outslice]
numslices = 3         ; number of slices (for each slice need to specify
	              ;                   slicekind and sliceidx)
slicekind = 1,2,3     ; type of slice (1: z=constant, 2: y=constant, 3: x=constant)
sliceidx  = 33,33,33  ; slice index (k=sliceidx or j=sliceidx or i=sliceidx)
output3D  = 0         ; should 3D data be ouputted (1-yes, 0-no)
; -------------------------------------------------
;  Initial condition parameters
; -------------------------------------------------
[initialparams]
rhol = 2.0    ; rhol (left state density)
u1l  = 0.0    ; u1l  (left state 1-velocity)
u2l  = 0.0    ; u2l  (left state 2-velocity)
u3l  = 0.0    ; u3l  (left state 3-velocity)
pl   = 2.0    ; pl   (left state pressure)
rhor = 1.0    ; rhor (right state density)
u1r  = 0.0    ; u1r  (right state 1-velocity)
u2r  = 0.0    ; u2r  (right state 2-velocity)
u3r  = 0.0    ; u3r  (right state 3-velocity)
pr   = 1.0    ; pr   (right state pressure)
; -------------------------------------------------
;  Euler equation parameters
; -------------------------------------------------
[eulerparams]
gamma = 1.6666666666666667     ; gamma (gas constant)